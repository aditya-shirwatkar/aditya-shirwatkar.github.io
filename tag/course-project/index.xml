<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Course Project | A2</title>
    <link>https://aditya-shirwatkar.github.io/tag/course-project/</link>
      <atom:link href="https://aditya-shirwatkar.github.io/tag/course-project/index.xml" rel="self" type="application/rss+xml" />
    <description>Course Project</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language>
    <image>
      <url>https://aditya-shirwatkar.github.io/media/icon_hu3c8b3cca05720205a51908e6ee147f10_203090_512x512_fill_lanczos_center_3.png</url>
      <title>Course Project</title>
      <link>https://aditya-shirwatkar.github.io/tag/course-project/</link>
    </image>
    
    <item>
      <title>ODE Analysis of Gradient based Unconstrained Optimization Algorithms</title>
      <link>https://aditya-shirwatkar.github.io/project/num_opt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://aditya-shirwatkar.github.io/project/num_opt/</guid>
      <description>&lt;p&gt;This work focuses on analyzing well-established gradient-based unconstrained optimization algorithms like Gradient Descent (GD), Mirror Descent (MD), Nesterov’s Accelerated Gradient Descent (NAGD) and Newton&amp;rsquo;s Method (NM). To achieve this, we derive the continuous-time ordinary differential equations (ODEs) of these algorithms, by comparing their iterative update rule to a discretized version of the corresponding ODE. We then construct Lyapunov functions to investigate the convergence and stability properties of the equilibrium points of the ODE (which correspond to stationary points or local minima of the objective function). Additionally, we consider some special cases for which the rate of convergence for all of them can be shown as $\mathcal{O}(1/t^p)$, where $p \in \mathbb{R_+}$. Lastly, we propose a new Lyapunov function for the ODE corresponding to Newton&amp;rsquo;s method and provide a new simple proof for its convergence rate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formal Control of Robotic Systems</title>
      <link>https://aditya-shirwatkar.github.io/project/formal_control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://aditya-shirwatkar.github.io/project/formal_control/</guid>
      <description>&lt;p&gt;This work includes two projects, one as a final term exam and a final lab exercise.&lt;/p&gt;
&lt;h2 id=&#34;final-term-exam&#34;&gt;Final Term Exam&lt;/h2&gt;
&lt;p&gt;Studied, Implemented and Extended the work &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; in MATLAB&lt;/p&gt;
&lt;h2 id=&#34;final-lab-exercise&#34;&gt;Final Lab Exercise&lt;/h2&gt;
&lt;p&gt;Designed and Implemented a Controller for a three-wheeled omnidirectional robot to satisfy a given Signal Temporal Logic Specification (STL) in simulation and real-world. The implemented controller is inspired from &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Rodionova, Alena, Lars Lindemann, Manfred Morari and George J. Pappas. “Time-Robust Control for STL Specifications.” 2021 60th IEEE Conference on Decision and Control (CDC) (2021): 572-579.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;L. Lindemann, C. K. Verginis and D. V. Dimarogonas, &amp;ldquo;Prescribed performance control for signal temporal logic specifications,&amp;rdquo; 2017 IEEE 56th Annual Conference on Decision and Control (CDC), Melbourne, VIC, Australia, 2017, pp. 2997-3002, doi: 10.1109/CDC.2017.8264095.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;M. Sewlia, C. K. Verginis and D. V. Dimarogonas, &amp;ldquo;Cooperative Object Manipulation Under Signal Temporal Logic Tasks and Uncertain Dynamics,&amp;rdquo; in IEEE Robotics and Automation Letters, vol. 7, no. 4, pp. 11561-11568, Oct. 2022, doi: 10.1109/LRA.2022.3200760.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Representation Free Model Predictive Control for Legged Locomotion</title>
      <link>https://aditya-shirwatkar.github.io/project/rfmpc_cpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://aditya-shirwatkar.github.io/project/rfmpc_cpp/</guid>
      <description>&lt;p&gt;Model Predictive Control is a popular and powerful control algorithm used in legged robot locomotion. In this project we show the application of the recently published walking controller, Representation Free Model Predictive Control (RF-MPC), to a quadruped robot, Stoch-3, in a simulation environment. The RF-MPC controller directly represents the rotational dynamics using the rotation matrix. Other walking controllers like Convex-MPC use Euler angles for representing orientations, which have singularity and approximation issues. RF-MPC models the quadruped robot as a single rigid body with massless legs. It uses a variation-based linearization scheme to linearize the model. The MPC control law is written in a standard Quadratic Program (QP) form.&lt;/p&gt;
&lt;p&gt;The Algorithm can perform step-in-place motion for some duration after which the solution starts to diverge and the robot becomes unstable. The main reason behind this is the suboptimal reference trajectory of control inputs based on simple heuristics. Hence we generate the reference trajectory of control inputs for the RF-MPC by using the Convex MPC algorithm at a lower frequency. With this, we have been able to achieve robust performance for
all different types of gaits. The Convex MPC runs at 30 Hz and RF-MPC runs at 300 Hz. We demonstrate in-place stepping, forward walking, in-place turning, and sideways walking using the trot gait on the Stoch-3 robot in the Pybullet simulation environment. We also performed some preliminary hardware experiments for sim2real validation&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ViLocNav: Visual Learning-based Optimal Control and Navigation</title>
      <link>https://aditya-shirwatkar.github.io/project/vilocnav/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://aditya-shirwatkar.github.io/project/vilocnav/</guid>
      <description>&lt;p&gt;Model-based control methods like MPC and iLQG are popular paradigms for autonomous robot navigation because they can efficiently plan robust robot motion trajectories by leveraging a known deterministic or stochastic dynamics model. However, using model-based methods in situations where the environment is a priori unknown and can only be observed partially through onboard sensors on the robot is challenging and requires mapping and localization of the robot w.r.t to the unknown environment.
Mapping can be used to estimate the 3D structure of the environment (using RGB / RGB-D images / LiDAR scans), which is used by a planner to compute paths to a goal. Although such purely geometric intermediate representations do not capture navigational affordances (such as: to go far away, one should step into a hallway, etc.). Furthermore, mapping is challenging with just RGB observations and often unreliable even with active depth sensors (such as in presence of shiny or thin objects or the presence of strong ambient light). End-to-end learning methods which do not rely on any model-based setting are used to sidestep this explicit map estimation step and have also been studied by some researchers. However, such approaches have proven to be extremely sample inefficient and highly specific to the system they were trained on. Plus the control outputs from the pipeline are jittery and often not optimal, which increases the difficulty of deployment in real-world scenarios.
In our project, we will try to improve on this shortcoming by combining deep learning and model-based control. Our pipeline will consist of a learning-based perception module along with optimal control for autonomous driving. A series of waypoints are produced by the learning-based perception module that guides the robot to the goal by avoiding obstacles. This approach is highly based on the paper “Combining Optimal Control and Learning for Visual Navigation in Novel Environments”. A model-based planner uses these waypoints to generate a smooth and dynamically feasible trajectory, which is then executed on the physical system using feedback control.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple FEM Algorithms</title>
      <link>https://aditya-shirwatkar.github.io/project/fem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://aditya-shirwatkar.github.io/project/fem/</guid>
      <description>&lt;p&gt;Repository of implementation of few algorithms for structural analysis of 1D beam, 2D Truss, 1D Rod, and 2D beam elements in MATLAB. Also developed simple graphical tools to analyze the deformation results and numerical values of solution obtained.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Computer Graphics Algorithms</title>
      <link>https://aditya-shirwatkar.github.io/project/cgsm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://aditya-shirwatkar.github.io/project/cgsm/</guid>
      <description>&lt;p&gt;Implemented the following computer graphics algorithms in Python,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Digital Differential Analyzer (DDA) - Line and Polygon generating algorithm&lt;/li&gt;
&lt;li&gt;Bresenham&amp;rsquo;s Line, Polygon, Circle and Ellipse algorithm&lt;/li&gt;
&lt;li&gt;Cohen-Sutherland Line and window clipping algorithms&lt;/li&gt;
&lt;li&gt;2D-3D Homogenous Transformation algorithms&lt;/li&gt;
&lt;li&gt;Bezier and Hermite curve generation algorithms&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
